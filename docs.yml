openapi: 3.0.0
info:
  version: 1.0.0
  title: Mentutor
  description: Mentutor Open API Capstone Project
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/NURFATUROHMAN28/Mentutor/1.0.0
tags:
  - name: Login
    description: Login as users
  - name: Admin
    description: Management users & class
  - name : Mentor
    description: Mentor Features
  - name : Mentee
    description: Mentee Feature
  - name : Class
  - name : Task
  - name : Forum
    description: For discussion in class
paths:

# FITUR ADMIN

  /login:
    post:
      tags:
        - "Login"
      summary: Login User
      description: Login User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginReq'
            example:
                  email: "hery@gmail.com"
                  password: "asdfqwer"
      responses:
        '200':
            $ref: '#/components/responses/successLogin'
        '400':
            $ref: '#/components/responses/failedRespon'
        '500':
            $ref: '#/components/responses/failedRespon500'
  /users:
    post:
      tags:
        - "Admin"
      summary: Register New Users
      description: User Register
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBodyRequest'
            examples:
              register:
                description: User 1 Register New Users
                value:
                  name: "Herry"
                  email: "hery@gmail.com"
                  password: "asdfqwer"
                  class: back-end
                  role: Mentee
      responses:
        '201':
          $ref: '#/components/responses/getProfileUser'
        '400':
            $ref: '#/components/responses/failedRespon'
        '500':
            $ref: '#/components/responses/failedRespon500'  
    get:
      tags:
        - "Admin"
      summary: Get All User
      description: Get all profile mentee & mentor
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Success get all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  "message":
                    type: string
                  "data":
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        role:
                          type: string
                        class:
                          type: string
                example:
                  message: success get all users
                  data:
                    - id : 1
                      name : Budi
                      role : Mentor
                      class : Back End
                    - id : 2
                      name : John
                      role : Mentee
                      class : Front End
        '400':
          $ref: '#/components/responses/failedRespon'
        '500':
          $ref: '#/components/responses/failedRespon500'
  /classes:
    post:
      tags:
        - "Class"
      summary: Register New Class
      description: Menambahkan kelas baru dari fitur admin
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddNewClass'
            example:
              class: Back End
      responses:
        '201':
          $ref: '#/components/responses/responses201'
        '400':
          $ref: '#/components/responses/failedRespon'
        '500':
          $ref: '#/components/responses/failedRespon500'
  /users/{id_user}:
    put:
      tags:
        - "Admin"
      summary: Update Users
      description: Update Users
      security:
        - JWTAuth: []
      parameters: 
        - in: path
          name: id_user
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdminUpdateRequest'
            example:
              name: Hery
              images: hery-depok.jpg
              email: hery@gmail.id
              password: asdfghjk
              role: mentee
              class: Back End
      responses:
        '200':
          $ref: '#/components/responses/successUpdate'
        '400':
          $ref: '#/components/responses/failedRespon'
        '500':
          $ref: '#/components/responses/failedRespon500'
    delete:
      tags:
        - "Admin"
      summary: Delete User Account
      description: Menghapus akun user oleh admin
      security:
        - JWTAuth: []
      parameters:
      - in: path
        required: true
        name: id_user
        schema:
          type: integer
      responses:
        '200':
          $ref: '#/components/responses/successDelete'
        '400':
          $ref: '#/components/responses/failedRespon'
        '500':
          $ref: '#/components/responses/failedRespon500'     
    get:
      tags:
        - "Admin"
      summary: Get Profile Other User
      description: Get Profile User
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id_user
          schema:
            type: integer
          required: true
      responses:
        '200':
          $ref: '#/components/responses/getProfileUser'
        '400':
          $ref: '#/components/responses/failedRespon'
        '500':
          $ref: '#/components/responses/failedRespon500'
  /classes/{id_class}:
    put:
      tags:
        - "Class"
      summary: Update class name or Status
      description: Ubah status kelas menjadi aktif/nonaktif atau mengganti nama kelas
      security:
        - JWTAuth: []
      parameters:
        - name: id_class
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClass' 
            example:
              class: Front End
              status: active
      responses:
        '200':
          $ref: '#/components/responses/successRespon'
        '400':
          $ref: '#/components/responses/failedRespon'
        '500':
          $ref: '#/components/responses/failedRespon500'
    delete:
      tags:
        - "Class"
      summary: Delete exiting class
      description: Menghapus kelas yang non aktif
      security:
        - JWTAuth: []
      parameters:
        - name: id_class
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/successDelete'

# FITUR MENTOR
  
  /users/update:
    put:
      tags:
      - "Mentor"
      - "Mentee"
      summary: Update profile user
      description: Update profile mentor by id mentor dari token
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserUpdateProfile'
      responses:
        '200':
          $ref: '#/components/responses/AdminUpdateProfile'
        '400':
           $ref: '#/components/responses/failedRespon'
        '500':
           $ref: '#/components/responses/failedRespon500'
  /mentors/tasks:
    post:
      tags:
        - "Mentor"
      summary: Add task by mentor
      description: Menambahkan tugas yang diberikan oleh mentor untuk mentee pada kelas 
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskBodyReq'
              example:
                title: bilangan prima
                description: tentukan bilangan prima dari a ke z apa bila a 12 z 222 tentukan hasil bilangannya
                images: task-bil-prima.jpg
                file: bilangan-prima.pdf
                due_date: "2022/11/05"
      responses:
        '201':
          $ref: '#/components/responses/successTask'
        '400':
            $ref: '#/components/responses/failedRespon'
        '500':
            $ref: '#/components/responses/failedRespon500'
    get:
      tags: 
      - "Mentor"
      summary: Get all task by id mentor
      description: Mengambil data seluruh tugas yang telah dibuat oleh mentor 
      security: 
      - JWTAuth: []
      responses:
        '200':
          $ref: '#/components/responses/successGetTask'
        '400':
          $ref: '#/components/responses/failedRespon'
        '500':
           $ref: '#/components/responses/failedRespon500'
  /mentors/tasks/{id_task}:
    get:
      tags: 
        - "Mentor"
      summary: Get detail task
      description: Mengambil detail tugas dengan data array assignment mentee
      security:
        - JWTAuth: []
      parameters: 
        - in: path
          name: id_task
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/successGetSingleTask'
    put:
      tags: 
      - "Mentor"
      summary: Update task by mentor
      description: Update tugas oleh mentor jika ada perubahan
      parameters: 
      - in: path
        name: id_task
        required: true
        schema:
          type: integer
      security: 
        - JWTAuth: []
      requestBody:
        required: true
        content:
          aplication/json:
            schema:
               $ref: '#/components/schemas/taskBodyReq'
      responses:
        '201':
          $ref: '#/components/responses/successTask'
        '400':
          $ref: '#/components/responses/failedRespon'
        '500':
          $ref: '#/components/responses/failedRespon500'
    delete:
      tags: 
      - "Mentor"
      summary: Delete task by mentor
      description: Delete tugas oleh mentor jika tugas ingin dihapus
      parameters: 
      - in: path
        name: id_task
        required: true
        schema:
          type: integer
      security: 
        - JWTAuth: []
      responses:
        '200':
          $ref: '#/components/responses/successDelete'
        '400':
           $ref: '#/components/responses/failedRespon'
        '500':
          $ref: '#/components/responses/failedRespon500'
  
# FITUR MENTEE

  /mentees/tasks:
    get:
      tags:
      - "Mentee"
      summary: Get all task by mentee class
      description: Mengambil semua tugas yang ada pada kelas mentee tersebut
      security:
      - JWTAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getAllTaskMentee'
        '400':
           $ref: '#/components/responses/failedRespon'
        '500':
           $ref: '#/components/responses/failedRespon500'

# FITUR TASK
  /mentees/submission/{id_task}:
    post:
      tags:
      - "Task"
      summary: Assign task by mentee
      description: Mentee mengumpulkan tugas dari daftar tugas yang ada
      parameters:
        - in: path
          name: id_task
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddSubmission'
      responses:
        '200':
            $ref: '#/components/responses/successAddAssignment'
        '400':
           $ref: '#/components/responses/failedRespon'
        '500':
           $ref: '#/components/responses/failedRespon500'
  /mentors/submisson/{id_submission}:
    post:
      tags:
      - "Task"
      summary: Submit score by mentor
      description: Mentor memberikan nilat terhadap tugas yang di submit mentee
      parameters:
      - in: path
        name: id_submission
        required: true
        schema:
          type: integer
      requestBody:
        content:
          aplication/json:
            schema:
              type: object
              properties:
                  "score":
                    type: integer
                    example: 90
      responses:
        '200':
          $ref: '#/components/responses/successSubmitScore'
        '400':
           $ref: '#/components/responses/failedRespon'
        '500':
           $ref: '#/components/responses/failedRespon500'
            
# FITUR FORUM
  /users/forum:
    get:
      tags:
      - "Forum"
      security:
      - JWTAuth: []
      responses:
        '200':
          $ref: '#/components/responses/GetStatus'
        '400':
           $ref: '#/components/responses/failedRespon'
        '500':
           $ref: '#/components/responses/failedRespon500'
    post:
      tags:
      - "Forum"
      security:
      - JWTAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                "caption":
                  type: string
                "images":
                  type: string
      responses:
        '201':
          description: success add status
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  "id_status":
                    type: integer
                  "caption":
                    type: string
                  "images":
                    type: string
                example:
                  id_status: 1
                  caption: Untuk soal Persamaan point 2 maksudnya gimana ya?
                  images: persamaan.jpg
        '400':
           $ref: '#/components/responses/failedRespon'
        '500':
           $ref: '#/components/responses/failedRespon500'
      

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UpdateClass:
      type: object
      properties:
        "class":
          type: string
        "status":
          type: string
    AddNewClass:
      type: object
      properties:
        "class":
          type: string
          minLength: 1
    UserLoginReq:
      type: object
      properties:
        "email":
          type: string
          minLength: 1
        "password":
          type: string
          format: password
    AdminUpdateRequest:
      type: object
      properties:
        "name":
          type: string
          minLength: 3
        "email":
          type: string
          minLength: 3
        "password":
          type: string
          format: password
          minLength: 3
        "images":
          type: string
        "role":
          type: string
        "class":
          type: string
    taskBodyReq:
      type: object
      properties:
        "title":
          type: string
          minLength: 1
        "description":
          type: string
          minLength: 1
        "image":
          type:  string
        "file":
          type: string
          minLength: 1
        "due_date":
          type: string
          format: date
    UserBodyRequest:
      type: object
      properties:
        "name":
          type: string
          minLength: 1
        "email":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1
          format: password
        "role":
          type: string
          minLength: 1
        "class":
          type: string
          minLength: 1
    UserUpdateProfile:
      type: object
      properties:
        "name":
          type: string
          minLength: 3
        "email":
          type: string
          minLength: 3
        "password":
          type: string
          format: password
          minLength: 3
        "images":
          type: string
    AddSubmission:
      type: object
      properties:
        "file":
          type: string

  responses:
    successRegister:
      description: Success Register New Users
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Register Success
              data:
                type: object
                example:
                  "id": 1
                  "name": "Hery"
                  "email" : "hery@gmail.com"
                  "role": "Mentee"
                  "class": "back-end"
    successDelete:
      description: Success Delete
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Delete Success
    failedRespon:
      description: Status Response Failed
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: invalid input from client
    failedRespon500:
      description: Status Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Internal Server Error
    successRespon:
      description: Status Response Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Success
    responses201:
      description: Status Created Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Success Created
    successLogin:
      description: Success Login
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Success Login User
              data:
                type: object
                properties:
                  id_user:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: Hery
                  role:
                    type: string
                    example: Mentee
                  id_class:
                    type: integer
                    example: 1
                  class:
                    type: string
                    example: Back-end
                  token:
                    type: string
                    example: eyJjlcmnjen.jiyYdjoLjsjbcnejg$bvklsd.LSDmcuvuvdbk
    successUpdate:
      description: Success Update
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Update Success
    respon201:
      description: Success create
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: success create
    getProfileUser: 
      description: Success Get profile
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  id_user:
                    type: integer
                  images:
                    type: string
                  name:
                    type: string
                  class: 
                    type: string
                  role:
                    type: string
          example:
            message: Success Get Profile
            data:
              id_user: 1
              name: "Herry"
              images: "images.jpg"
              class: "Back-end"
              role: "mentee"
    AdminUpdateProfile: 
      description: Success Update profile
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  id_user:
                    type: integer
                  email:
                    type: string
                  name:
                    type: string
                  images:
                    type: string
          example:
            message: success update profile
            data:
              id_user: 1
              name: "Hery"
              email: "hery@gmail.com"
              images: "images.jpg"
    successTask:
      description: Success add task from mentor
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              message:
                type: string
              data: 
                type: object
                properties:
                  id_task:
                    type: string
                  title:
                    type: string
                  description:
                    type: string
                  images:
                    type: string
                  file:
                    type: string
                  due_date:
                    type: string
            example:
              message: Success insert task
              data:
                id_task: 1
                title: bilangan prima
                description: tentukan bilangan prima dari a ke z apa bila a 12 z 222 tentukan hasil bilangannya
                images: task-bil-prima.jpg
                file: bilangan-prima.pdf
                due_date: 2022/11/05
    successGetTask:
      description: Success get all task by id mentor
      content:
        multipart/form-dat:
          schema:
            type: object
            properties:
              "message":
                type: string
              "data":
                type: array
                items:
                  type: object
                  properties:
                    id_task:
                      type: string
                    title:
                      type: string
                    description:
                      type: string
                    images:
                      type: string
                    file:
                      type: string
                    due_date:
                      type: string
          example: 
            message: Success insert task
            data:
              - id_task: 1
                title: bilangan prima
                description: tentukan bilangan prima dari a ke z apa bila a 12 z 222 tentukan hasil bilangannya
                images: task-bil-prima.jpg
                file: bilangan-prima.pdf
                due_date: 2022/11/05
              - id_task: 2
                title: bilangan ganjil
                description: tentukan bilangan ganjil dari 1 sampai 10
                images: task-bil-ganjil.jpg
                file: bilangan-ganjil.pdf
                due_date: 2022/11/05
              - id_task: 3
                title: bilangan fibonacci
                description: tentukan bilangan fibonnaci ke 10
                images: task-bil-fibo.jpg
                file: bilangan-fibo.pdf
                due_date: 2022/11/05
    successGetSingleTask:
      description: Success get all task by id mentor
      content:
        multipart/form-dat:
          schema:
            type: object
            properties:
              "message":
                type: string
              "data":
                type: object
                properties:
                  id_task:
                    type: integer
                  title:
                    type: string
                  description:
                    type: string
                  images:
                    type: string
                  file:
                    type: string
                  due_date:
                    type: string
                  assignment:
                    type: array
                    items:
                      type: object
                      properties:
                        "id_submission":
                          type: string
                        "score":
                          type: integer
          example: 
            message: success get single task
            data:
              id_task: 1
              title: Persamaan
              description: Persamaan dari 2x+2y=3 adalah?
              images: persamaan.jpg
              file: persamaan.pdf
              due_date: 2022/11/22
              assignment:
                - id_submission: 1
                  name: Surya
                  score: 0
                - id_submission: 2
                  name: Peter
                  score: 0
    getAllTaskMentee:
      description: Success get all task
      content:
        aplication/json:
          schema:
            type: object
            properties:
              "message":
                type: string
              "data":
                type: array
                items:
                  type: object
                  properties:
                    id_task:
                      type: integer
                    title:
                      type: string
                    description:
                      type: string
                    images: 
                      type: string
                    file:
                      type: string
                    score:
                      type: integer
                    due_date:
                      type: string
          example: 
            message: success get all task
            data:
              - id_task: 1
                title: bilangan prima
                description: tentukan bilangan prima dari a ke z apa bila a 12 z 222 tentukan hasil bilangannya
                images: task-bil-prima.jpg
                file: bilangan-prima.pdf
                score: 0
                due_date: 2022/11/05
              - id_task: 2
                title: bilangan ganjil
                description: tentukan bilangan ganjil dari 1 sampai 10
                images: task-bil-ganjil.jpg
                file: bilangan-ganjil.pdf
                due_date: 2022/11/05
                score: 70
              - id_task: 3
                title: bilangan fibonacci
                description: tentukan bilangan fibonnaci ke 10
                images: task-bil-fibo.jpg
                file: bilangan-fibo.pdf
                score: 90
                due_date: 2022/11/05
    successAddAssignment:
      description: success insert assignment
      content:
        aplication/json:
          schema:
            type: object
            properties:
              "message":
                type: string
              "data":
                type: object
                properties:
                  id_task: 
                    type: integer
                  file:
                    type: string
          example:
            message: success insert assignment
            data:
              id_submission: 1
              title: persamaan
              file: tugas.pdf
    successSubmitScore:
      description: success insert score
      content:
        aplication/json:
          schema:
            type: object
            properties:
              "message":
                type: string
              "data":
                type: object
                properties:
                  "id_submission": 
                    type: integer
                  "title":
                    type: string
                  "file":
                    type: string
                  "score":
                    type: integer
          example:
            message: success insert assignment
            data:
              id_submission: 1
              title: Tugas Persamaan
              file: tugas.pdf
              score: 90
    GetStatus:
      description: success get all status by id class
      content:
        aplication/json:
          schema:
            type: object
            properties:
              "message":
                type: string
              "data":
                type: object
                properties:
                  "id_status":
                    type: integer
                  "name":
                    type: string
                  "caption":
                    type: string
                  "comments":
                    type: array
                    items:
                      type: object
                      properties:
                        "id_comments":
                          type: integer
                        "caption":
                          type: string
          example:
            message: success get all status
            data:
              id_status: 1
              name: Budi
              caption: Untuk soal Persamaan point 2 maksudnya gimana ya?
              comments:
                - id_comment: 1
                  nama: Robert
                  role: mentor
                  caption: itu yang tanda lebih darinya kebalik
                - id_comment: 2
                  nama: Stephen
                  role: mentee
                  caption: iya aku juga bingung banget